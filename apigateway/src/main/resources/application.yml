server:
  port: 8080
spring:
  main:
    web-application-type: reactive
  application:
    name: apigateway
  redis:
    host: localhost
    port: 6379
  cache:
    type: redis
    redis:
      time-to-live: 3600000 # 1 hour in milliseconds
      cache-null-values: false
  cloud:
    gateway:
      routes:
        - id: courseservice
          uri: http://localhost:8080
          predicates:
            - Path=/api/courses/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
            - name: CacheRequestBody
              args:
                cache-name: course-cache
                time-to-live: 3600
         
        - id: UserMS
          uri: http://localhost:8082
          predicates:
            - Path=/users/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
            - name: CacheRequestBody
              args:
                cache-name: user-cache
                time-to-live: 3600
                
        - id: NotificationService
          uri: http://localhost:8083
          predicates:
            - Path=/notifications/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
            - name: CacheRequestBody
              args:
                cache-name: notification-cache
                time-to-live: 3600

# Logging 
logging:
  level:
    root: INFO
    com.example.apigateway: DEBUG
    org.springframework.cloud.gateway: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] [${spring.application.name},%X{traceId},%X{spanId}] %-5level %logger{36} - %msg%n"
  file:
    name: logs/apigateway.log
    max-size: 10MB
    max-history: 10

# Actuator 
management:
  endpoints:
    web:
      exposure:
        include: health,metrics,prometheus,info,loggers
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true

# Tracing 
spring:
  sleuth:
    sampler:
      probability: 1.0
    web:
      skipPattern: (^cleanup.*|.+favicon.*)
         
